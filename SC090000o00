<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Publish Code → Interactive Game Tiles</title>
<style>
  :root{
    --bg:#071025; --card:#071827; --muted:#9fb0bf; --accent:#06b6d4; --glass: rgba(255,255,255,0.03);
    --radius:12px;
  }
  html,body{height:100%;margin:0;font-family:Inter,ui-sans-serif,system-ui,Segoe UI,Roboto,"Helvetica Neue";background:linear-gradient(180deg,#041223,#02101a);color:#e6f5fb}
  .container{max-width:1100px;margin:28px auto;padding:12px}
  header{display:flex;align-items:center;gap:12px}
  h1{font-size:18px;margin:0}
  .lead{color:var(--muted);font-size:13px;margin:0}

  /* Floating square button */
  .publish-btn{
    position:fixed; right:22px; bottom:22px; width:66px; height:66px;
    background:linear-gradient(180deg,var(--accent),#0891b2); color:#022; display:flex;align-items:center;justify-content:center;
    border-radius:14px;box-shadow:0 18px 40px rgba(2,6,12,0.6);cursor:pointer;z-index:1200;font-weight:800;
    text-align:center; padding:6px;
  }
  .publish-btn small{display:block;font-size:11px;color:#022}

  /* Cards grid */
  .grid{display:flex;flex-wrap:wrap;gap:12px;margin-top:18px}
  .card{
    width:240px;padding:10px;border-radius:12px;background:linear-gradient(180deg, rgba(255,255,255,0.016), transparent);
    box-shadow:0 10px 30px rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.03);
    display:flex;flex-direction:column;gap:8px;
  }
  .card .meta{color:var(--muted);font-size:12px}
  .card .actions{display:flex;gap:8px;margin-top:auto}
  button.btn{padding:8px 10px;border-radius:8px;border:0;cursor:pointer;font-weight:600}
  .btn-play{background:var(--accent);color:#012024}
  .btn-edit{background:transparent;color:var(--muted);border:1px solid rgba(255,255,255,0.03)}
  .btn-delete{background:transparent;color:#ff9c9c;border:1px solid rgba(255,255,255,0.03)}

  /* Modal (publisher) */
  .modal-backdrop{
    position:fixed;inset:0;background:rgba(2,6,10,0.66);display:none;align-items:center;justify-content:center;z-index:1300;
  }
  .modal{width:920px;max-width:95%;background:linear-gradient(180deg,#071223,#041827);border-radius:12px;padding:12px;border:1px solid rgba(255,255,255,0.03)}
  .row{display:flex;gap:10px;align-items:center;margin-top:8px}
  label{width:84px;color:var(--muted);font-size:13px}
  input[type="text"], textarea{flex:1;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,0.03);background:var(--glass);color:inherit}
  textarea{min-height:260px;font-family:ui-monospace,monospace;font-size:13px;resize:vertical}
  .controls{display:flex;gap:8px;justify-content:flex-end;margin-top:8px}

  /* Game overlay / window */
  .overlay{position:fixed;inset:0;display:none;z-index:1400;background:rgba(0,0,0,0.5);align-items:flex-start;justify-content:center;padding:18px}
  .win{
    width:1000px;max-width:calc(100% - 36px);height:640px;background:linear-gradient(180deg,#021428,#012034);border-radius:12px;
    box-shadow:0 30px 80px rgba(0,0,0,0.7);overflow:hidden;position:relative;resize:both;overflow:auto;min-width:320px;min-height:200px;
  }
  .win .hdr{display:flex;align-items:center;padding:10px;gap:10px;cursor:grab;background:linear-gradient(90deg, rgba(255,255,255,0.02), transparent)}
  .win .hdr .title{font-weight:700}
  .win .hdr .controls{margin-left:auto;display:flex;gap:8px}
  .game-frame{width:100%;height:calc(100% - 46px);border:0;background:#000;display:block}

  /* helpers */
  .muted{color:var(--muted);font-size:13px}
  .hint{font-size:13px;color:var(--muted);margin-top:12px}
  @media (max-width:640px){ .card{width:48%} .win{height:60vh} }
</style>
</head>
<body>
  <div class="container">
    <header>
      <div>
        <h1>Publish Code → Interactive Game Tiles</h1>
        <div class="lead">Paste or import HTML, publish a tile, click tile to run the game in an interactive window.</div>
      </div>
    </header>

    <section>
      <div class="muted">Your games</div>
      <div id="grid" class="grid" aria-live="polite"></div>
      <div id="empty" class="hint">No games yet — click <strong>Publish Code</strong> (bottom-right) to add one.</div>
    </section>
  </div>

  <!-- Publish floating button -->
  <div class="publish-btn" id="openBtn" title="Publish code">
    <div>
      <div style="font-size:20px;line-height:10px">+</div>
      <small>Publish<br>Code</small>
    </div>
  </div>

  <!-- Publisher modal -->
  <div class="modal-backdrop" id="modal" role="dialog" aria-modal="true" aria-hidden="true">
    <div class="modal" role="document" aria-labelledby="publishTitle">
      <div style="display:flex;align-items:center;justify-content:space-between">
        <div>
          <div id="publishTitle" style="font-weight:800">Publish HTML as Game</div>
          <div class="muted" style="font-size:12px">Paste full HTML or import a .html file. Click Publish to create a game tile.</div>
        </div>
        <div style="display:flex;gap:8px;align-items:center">
          <button id="sample" class="btn btn-edit">Sample</button>
          <button id="closeModal" class="btn btn-edit">Close</button>
        </div>
      </div>

      <div style="margin-top:10px">
        <div class="row">
          <label>Title</label>
          <input id="title" type="text" placeholder="Ex: My Canvas Game" value="My Game">
        </div>

        <div class="row">
          <label>Import</label>
          <input id="file" type="file" accept=".html,text/html" />
          <label style="width:auto;margin-left:auto;">
            <input id="allowSame" type="checkbox" /> <span class="muted" style="margin-left:6px">Allow same-origin (unsafe)</span>
          </label>
        </div>

        <div style="margin-top:6px">
          <label style="display:block;margin-bottom:6px;color:var(--muted)">HTML Content</label>
          <textarea id="html" placeholder="Paste a full HTML file (<!doctype html> ... )"></textarea>
        </div>

        <div class="controls">
          <button id="cancel" class="btn btn-edit">Cancel</button>
          <button id="publish" class="btn btn-play">Publish</button>
        </div>
        <div class="hint">Tip: when embedding in Google Sites, host your published page (GitHub Pages / Netlify) and embed the hosted URL — Sites' "Embed code" will show a static image otherwise.</div>
      </div>
    </div>
  </div>

  <!-- Game overlay -->
  <div class="overlay" id="overlay" aria-hidden="true"></div>

<script>
/* ---------- storage ---------- */
const KEY = 'published_games_v2';
let games = []; // {id,title,html,allowSameOrigin,createdAt}

const grid = document.getElementById('grid');
const empty = document.getElementById('empty');
const modal = document.getElementById('modal');
const openBtn = document.getElementById('openBtn');
const closeModal = document.getElementById('closeModal');
const cancel = document.getElementById('cancel');
const publishBtn = document.getElementById('publish');
const htmlInput = document.getElementById('html');
const titleInput = document.getElementById('title');
const fileInput = document.getElementById('file');
const sampleBtn = document.getElementById('sample');
const allowSame = document.getElementById('allowSame');
const overlay = document.getElementById('overlay');

function uid(){ return 'g'+Date.now().toString(36)+Math.random().toString(36).slice(2,8); }
function load(){ try{ games = JSON.parse(localStorage.getItem(KEY)) || []; }catch(e){ games=[]; } }
function save(){ try{ localStorage.setItem(KEY, JSON.stringify(games)); }catch(e){ console.warn('save failed',e); } }

/* ---------- render ---------- */
function render(){
  grid.innerHTML = '';
  if(games.length===0){ empty.style.display = 'block'; return; }
  empty.style.display = 'none';
  games.forEach(g=>{
    const c = document.createElement('div'); c.className='card';
    const t = document.createElement('div'); t.className='title'; t.innerText = g.title;
    const m = document.createElement('div'); m.className='meta'; m.innerText = new Date(g.createdAt).toLocaleString();
    // actions
    const actions = document.createElement('div'); actions.className='actions';
    const play = document.createElement('button'); play.className='btn btn-play'; play.innerText='Play';
    const edit = document.createElement('button'); edit.className='btn btn-edit'; edit.innerText='Edit';
    const del = document.createElement('button'); del.className='btn btn-delete'; del.innerText='Delete';
    const down = document.createElement('button'); down.className='btn btn-edit'; down.innerText='Download';

    play.addEventListener('click', ()=> openGame(g));
    edit.addEventListener('click', ()=> openEditorFor(g));
    del.addEventListener('click', ()=> {
      if(confirm('Delete "'+g.title+'"?')) {
        games = games.filter(x=>x.id!==g.id); save(); render();
      }
    });
    down.addEventListener('click', ()=> downloadHTML(g));

    actions.appendChild(play);
    actions.appendChild(edit);
    actions.appendChild(down);
    actions.appendChild(del);

    c.appendChild(t);
    c.appendChild(m);
    c.appendChild(actions);
    grid.appendChild(c);
  });
}

/* ---------- publisher modal ---------- */
function openModal(){ modal.style.display='flex'; modal.setAttribute('aria-hidden','false'); htmlInput.focus(); }
function closeModalFn(){ modal.style.display='none'; modal.setAttribute('aria-hidden','true'); resetPublishHandler(); }
openBtn.addEventListener('click', openModal);
closeModal.addEventListener('click', closeModalFn);
cancel.addEventListener('click', closeModalFn);

// file import
fileInput.addEventListener('change', async (ev)=>{
  const f = ev.target.files && ev.target.files[0];
  if(!f) return;
  try{
    const text = await f.text();
    htmlInput.value = text;
  }catch(e){ alert('Failed to read file: '+e); }
});

// sample
sampleBtn.addEventListener('click', ()=>{
  const sample = `<!doctype html>
<html>
<head><meta charset="utf-8"/><title>Sample Canvas Game</title>
<style>html,body{height:100%;margin:0;background:#071727;color:#fff;font-family:system-ui} .center{display:flex;align-items:center;justify-content:center;height:100vh}</style>
</head>
<body>
<div class="center"><canvas id="c" width="800" height="480" style="border-radius:8px"></canvas></div>
<script>
const c=document.getElementById('c'), ctx=c.getContext('2d'); let x=100,y=100,dx=3,dy=2;
function tick(){
  ctx.fillStyle='#00151a'; ctx.fillRect(0,0,c.width,c.height);
  ctx.fillStyle='#06b6d4'; ctx.beginPath(); ctx.arc(x,y,24,0,Math.PI*2); ctx.fill();
  x+=dx; y+=dy; if(x>c.width-24||x<24) dx=-dx; if(y>c.height-24||y<24) dy=-dy;
  requestAnimationFrame(tick);
}
tick();
</script>
</body>
</html>`;
  htmlInput.value = sample;
  titleInput.value = 'Sample Canvas Game';
});

// default publish handler (create new)
function resetPublishHandler(){
  publishBtn.onclick = ()=>{
    const html = htmlInput.value || '';
    if(!html.trim()) return alert('Please paste or import your HTML.');
    const item = { id: uid(), title: (titleInput.value||'Untitled Game').trim(), html, allowSameOrigin: !!allowSame.checked, createdAt: Date.now() };
    games.unshift(item);
    save(); render(); closeModalFn();
    // clear form
    htmlInput.value=''; titleInput.value='My Game'; fileInput.value='';
  };
}
resetPublishHandler();

/* ---------- edit ---------- */
function openEditorFor(game){
  openModal();
  titleInput.value = game.title; htmlInput.value = game.html; allowSame.checked = !!game.allowSameOrigin;
  // override publish handler to update
  publishBtn.onclick = ()=>{
    game.title = (titleInput.value || 'Untitled Game').trim();
    game.html = htmlInput.value || '';
    game.allowSameOrigin = !!allowSame.checked;
    game.createdAt = Date.now();
    games = games.map(g=> g.id===game.id ? game : g);
    save(); render(); closeModalFn();
  };
}

/* ---------- open game window (draggable/resizable) ---------- */
let activeWin = null;
function openGame(game){
  overlay.style.display = 'flex'; overlay.setAttribute('aria-hidden','false');
  // create window
  const win = document.createElement('div'); win.className='win';
  const hdr = document.createElement('div'); hdr.className='hdr';
  const title = document.createElement('div'); title.className='title'; title.innerText = game.title;
  const ctrls = document.createElement('div'); ctrls.className='controls';
  const maxBtn = document.createElement('button'); maxBtn.className='btn btn-edit'; maxBtn.innerText='Max';
  const closeBtn = document.createElement('button'); closeBtn.className='btn btn-delete'; closeBtn.innerText='Close';
  ctrls.appendChild(maxBtn); ctrls.appendChild(closeBtn);
  hdr.appendChild(title); hdr.appendChild(ctrls);

  const iframe = document.createElement('iframe'); iframe.className='game-frame';
  // configure sandbox
  const sandbox = game.allowSameOrigin ? 'allow-same-origin allow-scripts allow-forms allow-modals allow-popups' : 'allow-scripts allow-forms allow-modals allow-popups';
  iframe.setAttribute('sandbox', sandbox);
  iframe.srcdoc = game.html;

  win.appendChild(hdr); win.appendChild(iframe);
  overlay.appendChild(win);

  // position center-ish
  win.style.position='absolute';
  const rect = overlay.getBoundingClientRect();
  win.style.left = Math.max(12, (rect.width - win.clientWidth)/2) + 'px';
  win.style.top = Math.max(12, (rect.height - win.clientHeight)/8) + 'px';

  // dragging
  let dragging=false, sx=0, sy=0, sl=0, st=0;
  hdr.addEventListener('mousedown', e=>{
    dragging=true; sx=e.clientX; sy=e.clientY; sl=parseFloat(win.style.left||0); st=parseFloat(win.style.top||0);
    document.addEventListener('mousemove', onMove); document.addEventListener('mouseup', onUp);
    e.preventDefault();
  });
  function onMove(e){
    if(!dragging) return;
    const dx = e.clientX - sx, dy = e.clientY - sy;
    win.style.left = (sl + dx) + 'px'; win.style.top = (st + dy) + 'px';
  }
  function onUp(){ dragging=false; document.removeEventListener('mousemove', onMove); document.removeEventListener('mouseup', onUp); }

  // maximize toggle
  let maximized=false;
  maxBtn.addEventListener('click', ()=>{
    if(!maximized){
      win.dataset.prev = JSON.stringify({left: win.style.left, top: win.style.top, width: win.style.width, height: win.style.height});
      win.style.left='12px'; win.style.top='12px'; win.style.width=(overlay.clientWidth-24)+'px'; win.style.height=(overlay.clientHeight-24)+'px';
      maximized=true;
    } else {
      const prev = JSON.parse(win.dataset.prev || '{}');
      win.style.left = prev.left || 'auto'; win.style.top = prev.top || 'auto';
      win.style.width = prev.width || '1000px'; win.style.height = prev.height || '640px';
      maximized=false;
    }
  });

  // close
  closeBtn.addEventListener('click', closeAll);
  // overlay click outside closes
  overlay.addEventListener('click', (ev)=>{ if(ev.target===overlay) closeAll(); });

  // ESC to close
  const onKey = (ev)=> { if(ev.key==='Escape') closeAll(); };
  document.addEventListener('keydown', onKey);

  function closeAll(){
    overlay.style.display='none'; overlay.setAttribute('aria-hidden','true'); overlay.innerHTML=''; document.removeEventListener('keydown', onKey);
  }

  activeWin = win;
  // ensure top layering
  Array.from(overlay.children).forEach((c,i)=> c.style.zIndex = 100 + i);
}

/* ---------- download helper ---------- */
function downloadHTML(game){
  const blob = new Blob([game.html], {type:'text/html'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a'); a.href=url; a.download = (game.title||'game') + '.html';
  document.body.appendChild(a); a.click(); a.remove();
  setTimeout(()=>URL.revokeObjectURL(url), 1000);
}

/* ---------- export/import collection (optional) ---------- */
// quick export/import UI could be added here; omitted to keep UI focused

/* ---------- keyboard shortcuts ---------- */
document.addEventListener('keydown', (e)=>{
  if((e.ctrlKey||e.metaKey) && e.key.toLowerCase()==='p'){ e.preventDefault(); if(modal.style.display==='flex') closeModalFn(); else openModal(); }
});

/* ---------- init ---------- */
load(); render();
</script>
</body>
</html>
